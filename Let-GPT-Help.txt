I used a tool called transhell to achieve internationalization support. The usage of this tool involves modifying the text displayed to the user in the original script into variables in the format ${TRANSHELL_CONTENT_CONTENTINFO}, and importing it through a translation file ending with "transhell".
Here is an example of using the transhell translation program. Please learn its usage method.
The original script, named run-me-to-read-readme, is as follows:
```
#!/bin/bash
#############################################################

echo -e "transhell is a solution to make bash shell script i18nlize"
echo -e "Hello world!"
read 
```
The modified script is:
```
#!/bin/bash

source /opt/durapps/transhell/transhell.sh
load_transhell_debug

#############################################################

echo -e "${TRANSHELL_CONTENT_README}"
echo -e "${TRANSHELL_CONTENT_HELLO_WORLD}"
read 
```
The corresponding transhell file, named run-me-to-read-readme_en_US.transhell, contains the following content:
```
#!/bin/bash
TRANSHELL_CONTENT_README="transhell is a solution to make bash shell script i18nlize"
TRANSHELL_CONTENT_HELLO_WORLD="Hello world!"
```

The corresponding transhell file, named run-me-to-read-readme_zh_CN.transhell, contains the following content:
```
#!/bin/bash
TRANSHELL_CONTENT_README="transhell是一个bash国际化方案，可以让你的bash脚本拥有国际化的能力"
TRANSHELL_CONTENT_HELLO_WORLD="你好 世界！"

```
Please study this usage method. I will provide you with the program source code that requires this kind of operation in the following dialogue. For multiline texts, it is recommended to use different variables for better future modifications. Please help me execute this operation. You don't need to explain the steps, just let me know the modified program and the translated transhell file.
//////Please learn this usage method. I will send you the program source code and transhell file that require this operation in the following conversation. Please reverse the operations based on the variable names and content in the transhell file to restore the source program, and convert the variables starting with TRANSHELL_CONTENT back to strings.

----------------------------------------------------------------------------------------------------------------------------------



我使用了一个名为transhell的工具来实现国际化支持。这个工具的使用方法是将原脚本中向用户显示的文案修改为${TRANSHELL_CONTENT_CONTENTINFO}这样格式的变量，并通过一个以transhell结尾的翻译文件进行导入
这是一段使用了transhell翻译程序的例子，请学习它的使用方法
原程序如下，名为 run-me-to-read-readme
```
#!/bin/bash
#############################################################

echo -e "transhell is a solution to make bash shell script i18nlize"
echo -e "Hello world!"
read 
```
修改后的程序为

```
#!/bin/bash

source /opt/durapps/transhell/transhell. sh
load_transhell_debug

#############################################################

echo -e "${TRANSHELL_CONTENT_README}"
echo -e "${TRANSHELL_CONTENT_HELLO_WORLD}"
read 

```

对应的transhell文件一，名为 run-me-to-read-readme_en_US.transhell 内容为
```
#!/bin/bash
TRANSHELL_CONTENT_README="transhell is a solution to make bash shell script i18nlize"
TRANSHELL_CONTENT_HELLO_WORLD="Hello world!"

```

对应的transhell文件二，名为 run-me-to-read-readme_zh_CN.transhell，内容为 

```
#!/bin/bash
TRANSHELL_CONTENT_README="transhell是一个bash国际化方案，可以让你的bash脚本拥有国际化的能力"
TRANSHELL_CONTENT_HELLO_WORLD="你好 世界！"

```

请你学习这种使用方法，我会在接下来的对话中给你发送需要做这样操作的程序源代码。对于多行的文本，建议分不同的变量，以便于后续的修改请你帮我执行这样的操作。你不必解释接下来操作的步骤，直接告知我改好的程序和翻译好的transhell即可。


////请你学习这种使用方法，我会在接下来的对话中给你发送需要做这样操作的程序源代码和transhell文件。请根据transhell文件中的变量名和内容反向操作来还原源程序，把以TRANSHELL_CONTENT开头的变量还原回字符串
